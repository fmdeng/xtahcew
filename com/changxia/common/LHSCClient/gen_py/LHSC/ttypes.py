#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Result:
  """
  Attributes:
   - content
   - stocks
   - simhash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.STRING, 'stocks', None, None, ), # 2
    (3, TType.STRING, 'simhash', None, None, ), # 3
  )

  def __init__(self, content=None, stocks=None, simhash=None,):
    self.content = content
    self.stocks = stocks
    self.simhash = simhash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stocks = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.simhash = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Result')
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.stocks != None:
      oprot.writeFieldBegin('stocks', TType.STRING, 2)
      oprot.writeString(self.stocks)
      oprot.writeFieldEnd()
    if self.simhash != None:
      oprot.writeFieldBegin('simhash', TType.STRING, 3)
      oprot.writeString(self.simhash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.stocks is None:
        raise TProtocol.TProtocolException(message='Required field stocks is unset!')
      if self.simhash is None:
        raise TProtocol.TProtocolException(message='Required field simhash is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixResult:
  """
  Attributes:
   - title
   - content
   - simhash
   - relatedSecurityAndScores
   - industryCategoryAndScores
   - relatedIndustryAndScores
   - relatedProductAndScores
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.STRING, 'simhash', None, None, ), # 3
    (4, TType.STRING, 'relatedSecurityAndScores', None, None, ), # 4
    (5, TType.STRING, 'industryCategoryAndScores', None, None, ), # 5
    (6, TType.STRING, 'relatedIndustryAndScores', None, None, ), # 6
    (7, TType.STRING, 'relatedProductAndScores', None, None, ), # 7
  )

  def __init__(self, title=None, content=None, simhash=None, relatedSecurityAndScores=None, industryCategoryAndScores=None, relatedIndustryAndScores=None, relatedProductAndScores=None,):
    self.title = title
    self.content = content
    self.simhash = simhash
    self.relatedSecurityAndScores = relatedSecurityAndScores
    self.industryCategoryAndScores = industryCategoryAndScores
    self.relatedIndustryAndScores = relatedIndustryAndScores
    self.relatedProductAndScores = relatedProductAndScores

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.simhash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.relatedSecurityAndScores = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.industryCategoryAndScores = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.relatedIndustryAndScores = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.relatedProductAndScores = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixResult')
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.simhash != None:
      oprot.writeFieldBegin('simhash', TType.STRING, 3)
      oprot.writeString(self.simhash)
      oprot.writeFieldEnd()
    if self.relatedSecurityAndScores != None:
      oprot.writeFieldBegin('relatedSecurityAndScores', TType.STRING, 4)
      oprot.writeString(self.relatedSecurityAndScores)
      oprot.writeFieldEnd()
    if self.industryCategoryAndScores != None:
      oprot.writeFieldBegin('industryCategoryAndScores', TType.STRING, 5)
      oprot.writeString(self.industryCategoryAndScores)
      oprot.writeFieldEnd()
    if self.relatedIndustryAndScores != None:
      oprot.writeFieldBegin('relatedIndustryAndScores', TType.STRING, 6)
      oprot.writeString(self.relatedIndustryAndScores)
      oprot.writeFieldEnd()
    if self.relatedProductAndScores != None:
      oprot.writeFieldBegin('relatedProductAndScores', TType.STRING, 7)
      oprot.writeString(self.relatedProductAndScores)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.title is None:
        raise TProtocol.TProtocolException(message='Required field title is unset!')
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.simhash is None:
        raise TProtocol.TProtocolException(message='Required field simhash is unset!')
      if self.relatedSecurityAndScores is None:
        raise TProtocol.TProtocolException(message='Required field relatedSecurityAndScores is unset!')
      if self.industryCategoryAndScores is None:
        raise TProtocol.TProtocolException(message='Required field industryCategoryAndScores is unset!')
      if self.relatedIndustryAndScores is None:
        raise TProtocol.TProtocolException(message='Required field relatedIndustryAndScores is unset!')
      if self.relatedProductAndScores is None:
        raise TProtocol.TProtocolException(message='Required field relatedProductAndScores is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DocParam:
  """
  Attributes:
   - uid
   - title
   - content
   - pubtime
   - host
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'content', None, None, ), # 3
    (4, TType.STRING, 'pubtime', None, None, ), # 4
    (5, TType.STRING, 'host', None, None, ), # 5
  )

  def __init__(self, uid=None, title=None, content=None, pubtime=None, host=None,):
    self.uid = uid
    self.title = title
    self.content = content
    self.pubtime = pubtime
    self.host = host

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.pubtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.host = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DocParam')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.pubtime != None:
      oprot.writeFieldBegin('pubtime', TType.STRING, 4)
      oprot.writeString(self.pubtime)
      oprot.writeFieldEnd()
    if self.host != None:
      oprot.writeFieldBegin('host', TType.STRING, 5)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.uid is None:
        raise TProtocol.TProtocolException(message='Required field uid is unset!')
      if self.title is None:
        raise TProtocol.TProtocolException(message='Required field title is unset!')
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.pubtime is None:
        raise TProtocol.TProtocolException(message='Required field pubtime is unset!')
      if self.host is None:
        raise TProtocol.TProtocolException(message='Required field host is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConnectionError(Exception):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConnectionError')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
