#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def Segment(self, uid, content, clausePositionGap, sentencePositionGap, needSimhash):
    """
    Parameters:
     - uid
     - content
     - clausePositionGap
     - sentencePositionGap
     - needSimhash
    """
    pass

  def MixSegment(self, uid, title, content, clausePositionGap, sentencePositionGap):
    """
    Parameters:
     - uid
     - title
     - content
     - clausePositionGap
     - sentencePositionGap
    """
    pass

  def GenMixSegment(self, uid, title, content, clausePositionGap, sentencePositionGap, needTC):
    """
    Parameters:
     - uid
     - title
     - content
     - clausePositionGap
     - sentencePositionGap
     - needTC
    """
    pass

  def DocMixSegment(self, doc, clausePositionGap, sentencePositionGap, contentGroup, queueFlag):
    """
    Parameters:
     - doc
     - clausePositionGap
     - sentencePositionGap
     - contentGroup
     - queueFlag
    """
    pass

  def TextPredict(self, dlist):
    """
    Parameters:
     - dlist
    """
    pass

  def DictReload(self, ):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def Segment(self, uid, content, clausePositionGap, sentencePositionGap, needSimhash):
    """
    Parameters:
     - uid
     - content
     - clausePositionGap
     - sentencePositionGap
     - needSimhash
    """
    self.send_Segment(uid, content, clausePositionGap, sentencePositionGap, needSimhash)
    return self.recv_Segment()

  def send_Segment(self, uid, content, clausePositionGap, sentencePositionGap, needSimhash):
    self._oprot.writeMessageBegin('Segment', TMessageType.CALL, self._seqid)
    args = Segment_args()
    args.uid = uid
    args.content = content
    args.clausePositionGap = clausePositionGap
    args.sentencePositionGap = sentencePositionGap
    args.needSimhash = needSimhash
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_Segment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = Segment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "Segment failed: unknown result");

  def MixSegment(self, uid, title, content, clausePositionGap, sentencePositionGap):
    """
    Parameters:
     - uid
     - title
     - content
     - clausePositionGap
     - sentencePositionGap
    """
    self.send_MixSegment(uid, title, content, clausePositionGap, sentencePositionGap)
    return self.recv_MixSegment()

  def send_MixSegment(self, uid, title, content, clausePositionGap, sentencePositionGap):
    self._oprot.writeMessageBegin('MixSegment', TMessageType.CALL, self._seqid)
    args = MixSegment_args()
    args.uid = uid
    args.title = title
    args.content = content
    args.clausePositionGap = clausePositionGap
    args.sentencePositionGap = sentencePositionGap
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MixSegment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MixSegment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "MixSegment failed: unknown result");

  def GenMixSegment(self, uid, title, content, clausePositionGap, sentencePositionGap, needTC):
    """
    Parameters:
     - uid
     - title
     - content
     - clausePositionGap
     - sentencePositionGap
     - needTC
    """
    self.send_GenMixSegment(uid, title, content, clausePositionGap, sentencePositionGap, needTC)
    return self.recv_GenMixSegment()

  def send_GenMixSegment(self, uid, title, content, clausePositionGap, sentencePositionGap, needTC):
    self._oprot.writeMessageBegin('GenMixSegment', TMessageType.CALL, self._seqid)
    args = GenMixSegment_args()
    args.uid = uid
    args.title = title
    args.content = content
    args.clausePositionGap = clausePositionGap
    args.sentencePositionGap = sentencePositionGap
    args.needTC = needTC
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GenMixSegment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GenMixSegment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GenMixSegment failed: unknown result");

  def DocMixSegment(self, doc, clausePositionGap, sentencePositionGap, contentGroup, queueFlag):
    """
    Parameters:
     - doc
     - clausePositionGap
     - sentencePositionGap
     - contentGroup
     - queueFlag
    """
    self.send_DocMixSegment(doc, clausePositionGap, sentencePositionGap, contentGroup, queueFlag)
    return self.recv_DocMixSegment()

  def send_DocMixSegment(self, doc, clausePositionGap, sentencePositionGap, contentGroup, queueFlag):
    self._oprot.writeMessageBegin('DocMixSegment', TMessageType.CALL, self._seqid)
    args = DocMixSegment_args()
    args.doc = doc
    args.clausePositionGap = clausePositionGap
    args.sentencePositionGap = sentencePositionGap
    args.contentGroup = contentGroup
    args.queueFlag = queueFlag
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DocMixSegment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DocMixSegment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DocMixSegment failed: unknown result");

  def TextPredict(self, dlist):
    """
    Parameters:
     - dlist
    """
    self.send_TextPredict(dlist)
    return self.recv_TextPredict()

  def send_TextPredict(self, dlist):
    self._oprot.writeMessageBegin('TextPredict', TMessageType.CALL, self._seqid)
    args = TextPredict_args()
    args.dlist = dlist
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_TextPredict(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = TextPredict_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "TextPredict failed: unknown result");

  def DictReload(self, ):
    self.send_DictReload()
    return self.recv_DictReload()

  def send_DictReload(self, ):
    self._oprot.writeMessageBegin('DictReload', TMessageType.CALL, self._seqid)
    args = DictReload_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DictReload(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DictReload_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DictReload failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["Segment"] = Processor.process_Segment
    self._processMap["MixSegment"] = Processor.process_MixSegment
    self._processMap["GenMixSegment"] = Processor.process_GenMixSegment
    self._processMap["DocMixSegment"] = Processor.process_DocMixSegment
    self._processMap["TextPredict"] = Processor.process_TextPredict
    self._processMap["DictReload"] = Processor.process_DictReload

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_Segment(self, seqid, iprot, oprot):
    args = Segment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = Segment_result()
    result.success = self._handler.Segment(args.uid, args.content, args.clausePositionGap, args.sentencePositionGap, args.needSimhash)
    oprot.writeMessageBegin("Segment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MixSegment(self, seqid, iprot, oprot):
    args = MixSegment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MixSegment_result()
    result.success = self._handler.MixSegment(args.uid, args.title, args.content, args.clausePositionGap, args.sentencePositionGap)
    oprot.writeMessageBegin("MixSegment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GenMixSegment(self, seqid, iprot, oprot):
    args = GenMixSegment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GenMixSegment_result()
    result.success = self._handler.GenMixSegment(args.uid, args.title, args.content, args.clausePositionGap, args.sentencePositionGap, args.needTC)
    oprot.writeMessageBegin("GenMixSegment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DocMixSegment(self, seqid, iprot, oprot):
    args = DocMixSegment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DocMixSegment_result()
    result.success = self._handler.DocMixSegment(args.doc, args.clausePositionGap, args.sentencePositionGap, args.contentGroup, args.queueFlag)
    oprot.writeMessageBegin("DocMixSegment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_TextPredict(self, seqid, iprot, oprot):
    args = TextPredict_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = TextPredict_result()
    result.success = self._handler.TextPredict(args.dlist)
    oprot.writeMessageBegin("TextPredict", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DictReload(self, seqid, iprot, oprot):
    args = DictReload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DictReload_result()
    result.success = self._handler.DictReload()
    oprot.writeMessageBegin("DictReload", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class Segment_args:
  """
  Attributes:
   - uid
   - content
   - clausePositionGap
   - sentencePositionGap
   - needSimhash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.I32, 'clausePositionGap', None, None, ), # 3
    (4, TType.I32, 'sentencePositionGap', None, None, ), # 4
    (5, TType.I32, 'needSimhash', None, None, ), # 5
  )

  def __init__(self, uid=None, content=None, clausePositionGap=None, sentencePositionGap=None, needSimhash=None,):
    self.uid = uid
    self.content = content
    self.clausePositionGap = clausePositionGap
    self.sentencePositionGap = sentencePositionGap
    self.needSimhash = needSimhash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.clausePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sentencePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.needSimhash = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Segment_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.clausePositionGap != None:
      oprot.writeFieldBegin('clausePositionGap', TType.I32, 3)
      oprot.writeI32(self.clausePositionGap)
      oprot.writeFieldEnd()
    if self.sentencePositionGap != None:
      oprot.writeFieldBegin('sentencePositionGap', TType.I32, 4)
      oprot.writeI32(self.sentencePositionGap)
      oprot.writeFieldEnd()
    if self.needSimhash != None:
      oprot.writeFieldBegin('needSimhash', TType.I32, 5)
      oprot.writeI32(self.needSimhash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.uid is None:
        raise TProtocol.TProtocolException(message='Required field uid is unset!')
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.clausePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field clausePositionGap is unset!')
      if self.sentencePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field sentencePositionGap is unset!')
      if self.needSimhash is None:
        raise TProtocol.TProtocolException(message='Required field needSimhash is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Segment_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Segment_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixSegment_args:
  """
  Attributes:
   - uid
   - title
   - content
   - clausePositionGap
   - sentencePositionGap
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'content', None, None, ), # 3
    (4, TType.I32, 'clausePositionGap', None, None, ), # 4
    (5, TType.I32, 'sentencePositionGap', None, None, ), # 5
  )

  def __init__(self, uid=None, title=None, content=None, clausePositionGap=None, sentencePositionGap=None,):
    self.uid = uid
    self.title = title
    self.content = content
    self.clausePositionGap = clausePositionGap
    self.sentencePositionGap = sentencePositionGap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.clausePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sentencePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixSegment_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.clausePositionGap != None:
      oprot.writeFieldBegin('clausePositionGap', TType.I32, 4)
      oprot.writeI32(self.clausePositionGap)
      oprot.writeFieldEnd()
    if self.sentencePositionGap != None:
      oprot.writeFieldBegin('sentencePositionGap', TType.I32, 5)
      oprot.writeI32(self.sentencePositionGap)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.uid is None:
        raise TProtocol.TProtocolException(message='Required field uid is unset!')
      if self.title is None:
        raise TProtocol.TProtocolException(message='Required field title is unset!')
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.clausePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field clausePositionGap is unset!')
      if self.sentencePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field sentencePositionGap is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixSegment_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MixResult, MixResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MixResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixSegment_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GenMixSegment_args:
  """
  Attributes:
   - uid
   - title
   - content
   - clausePositionGap
   - sentencePositionGap
   - needTC
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'content', None, None, ), # 3
    (4, TType.I32, 'clausePositionGap', None, None, ), # 4
    (5, TType.I32, 'sentencePositionGap', None, None, ), # 5
    (6, TType.I32, 'needTC', None, None, ), # 6
  )

  def __init__(self, uid=None, title=None, content=None, clausePositionGap=None, sentencePositionGap=None, needTC=None,):
    self.uid = uid
    self.title = title
    self.content = content
    self.clausePositionGap = clausePositionGap
    self.sentencePositionGap = sentencePositionGap
    self.needTC = needTC

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.clausePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sentencePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.needTC = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GenMixSegment_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.clausePositionGap != None:
      oprot.writeFieldBegin('clausePositionGap', TType.I32, 4)
      oprot.writeI32(self.clausePositionGap)
      oprot.writeFieldEnd()
    if self.sentencePositionGap != None:
      oprot.writeFieldBegin('sentencePositionGap', TType.I32, 5)
      oprot.writeI32(self.sentencePositionGap)
      oprot.writeFieldEnd()
    if self.needTC != None:
      oprot.writeFieldBegin('needTC', TType.I32, 6)
      oprot.writeI32(self.needTC)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.uid is None:
        raise TProtocol.TProtocolException(message='Required field uid is unset!')
      if self.title is None:
        raise TProtocol.TProtocolException(message='Required field title is unset!')
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.clausePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field clausePositionGap is unset!')
      if self.sentencePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field sentencePositionGap is unset!')
      if self.needTC is None:
        raise TProtocol.TProtocolException(message='Required field needTC is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GenMixSegment_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MixResult, MixResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MixResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GenMixSegment_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DocMixSegment_args:
  """
  Attributes:
   - doc
   - clausePositionGap
   - sentencePositionGap
   - contentGroup
   - queueFlag
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'doc', (DocParam, DocParam.thrift_spec), None, ), # 1
    (2, TType.I32, 'clausePositionGap', None, None, ), # 2
    (3, TType.I32, 'sentencePositionGap', None, None, ), # 3
    (4, TType.STRING, 'contentGroup', None, None, ), # 4
    (5, TType.I32, 'queueFlag', None, None, ), # 5
  )

  def __init__(self, doc=None, clausePositionGap=None, sentencePositionGap=None, contentGroup=None, queueFlag=None,):
    self.doc = doc
    self.clausePositionGap = clausePositionGap
    self.sentencePositionGap = sentencePositionGap
    self.contentGroup = contentGroup
    self.queueFlag = queueFlag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.doc = DocParam()
          self.doc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.clausePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sentencePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.contentGroup = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.queueFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DocMixSegment_args')
    if self.doc != None:
      oprot.writeFieldBegin('doc', TType.STRUCT, 1)
      self.doc.write(oprot)
      oprot.writeFieldEnd()
    if self.clausePositionGap != None:
      oprot.writeFieldBegin('clausePositionGap', TType.I32, 2)
      oprot.writeI32(self.clausePositionGap)
      oprot.writeFieldEnd()
    if self.sentencePositionGap != None:
      oprot.writeFieldBegin('sentencePositionGap', TType.I32, 3)
      oprot.writeI32(self.sentencePositionGap)
      oprot.writeFieldEnd()
    if self.contentGroup != None:
      oprot.writeFieldBegin('contentGroup', TType.STRING, 4)
      oprot.writeString(self.contentGroup)
      oprot.writeFieldEnd()
    if self.queueFlag != None:
      oprot.writeFieldBegin('queueFlag', TType.I32, 5)
      oprot.writeI32(self.queueFlag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.doc is None:
        raise TProtocol.TProtocolException(message='Required field doc is unset!')
      if self.clausePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field clausePositionGap is unset!')
      if self.sentencePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field sentencePositionGap is unset!')
      if self.contentGroup is None:
        raise TProtocol.TProtocolException(message='Required field contentGroup is unset!')
      if self.queueFlag is None:
        raise TProtocol.TProtocolException(message='Required field queueFlag is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DocMixSegment_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MixResult, MixResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MixResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DocMixSegment_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TextPredict_args:
  """
  Attributes:
   - dlist
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'dlist', (TType.STRUCT,(DocParam, DocParam.thrift_spec)), None, ), # 1
  )

  def __init__(self, dlist=None,):
    self.dlist = dlist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.dlist = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = DocParam()
            _elem5.read(iprot)
            self.dlist.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TextPredict_args')
    if self.dlist != None:
      oprot.writeFieldBegin('dlist', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.dlist))
      for iter6 in self.dlist:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.dlist is None:
        raise TProtocol.TProtocolException(message='Required field dlist is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TextPredict_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TextPredict_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter13 in self.success:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DictReload_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DictReload_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DictReload_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DictReload_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
