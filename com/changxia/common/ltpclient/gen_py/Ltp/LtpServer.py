#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def Segment(self, content, needPos, isPhrase):
    """
    Parameters:
     - content
     - needPos
     - isPhrase
    """
    pass

  def MixSegment(self, content, clausePositionGap, sentPositionGap, needPos, isPhrase):
    """
    Parameters:
     - content
     - clausePositionGap
     - sentPositionGap
     - needPos
     - isPhrase
    """
    pass

  def MixSegmentParse(self, content, clausePositionGap, sentPositionGap, needPos, isPhrase, needParse):
    """
    Parameters:
     - content
     - clausePositionGap
     - sentPositionGap
     - needPos
     - isPhrase
     - needParse
    """
    pass

  def DictReload(self, ):
    pass

  def KeyWords(self, content, isPhrase):
    """
    Parameters:
     - content
     - isPhrase
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def Segment(self, content, needPos, isPhrase):
    """
    Parameters:
     - content
     - needPos
     - isPhrase
    """
    self.send_Segment(content, needPos, isPhrase)
    return self.recv_Segment()

  def send_Segment(self, content, needPos, isPhrase):
    self._oprot.writeMessageBegin('Segment', TMessageType.CALL, self._seqid)
    args = Segment_args()
    args.content = content
    args.needPos = needPos
    args.isPhrase = isPhrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_Segment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = Segment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "Segment failed: unknown result");

  def MixSegment(self, content, clausePositionGap, sentPositionGap, needPos, isPhrase):
    """
    Parameters:
     - content
     - clausePositionGap
     - sentPositionGap
     - needPos
     - isPhrase
    """
    self.send_MixSegment(content, clausePositionGap, sentPositionGap, needPos, isPhrase)
    return self.recv_MixSegment()

  def send_MixSegment(self, content, clausePositionGap, sentPositionGap, needPos, isPhrase):
    self._oprot.writeMessageBegin('MixSegment', TMessageType.CALL, self._seqid)
    args = MixSegment_args()
    args.content = content
    args.clausePositionGap = clausePositionGap
    args.sentPositionGap = sentPositionGap
    args.needPos = needPos
    args.isPhrase = isPhrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MixSegment(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MixSegment_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "MixSegment failed: unknown result");

  def MixSegmentParse(self, content, clausePositionGap, sentPositionGap, needPos, isPhrase, needParse):
    """
    Parameters:
     - content
     - clausePositionGap
     - sentPositionGap
     - needPos
     - isPhrase
     - needParse
    """
    self.send_MixSegmentParse(content, clausePositionGap, sentPositionGap, needPos, isPhrase, needParse)
    return self.recv_MixSegmentParse()

  def send_MixSegmentParse(self, content, clausePositionGap, sentPositionGap, needPos, isPhrase, needParse):
    self._oprot.writeMessageBegin('MixSegmentParse', TMessageType.CALL, self._seqid)
    args = MixSegmentParse_args()
    args.content = content
    args.clausePositionGap = clausePositionGap
    args.sentPositionGap = sentPositionGap
    args.needPos = needPos
    args.isPhrase = isPhrase
    args.needParse = needParse
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_MixSegmentParse(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = MixSegmentParse_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "MixSegmentParse failed: unknown result");

  def DictReload(self, ):
    self.send_DictReload()
    return self.recv_DictReload()

  def send_DictReload(self, ):
    self._oprot.writeMessageBegin('DictReload', TMessageType.CALL, self._seqid)
    args = DictReload_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DictReload(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DictReload_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DictReload failed: unknown result");

  def KeyWords(self, content, isPhrase):
    """
    Parameters:
     - content
     - isPhrase
    """
    self.send_KeyWords(content, isPhrase)
    return self.recv_KeyWords()

  def send_KeyWords(self, content, isPhrase):
    self._oprot.writeMessageBegin('KeyWords', TMessageType.CALL, self._seqid)
    args = KeyWords_args()
    args.content = content
    args.isPhrase = isPhrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_KeyWords(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = KeyWords_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "KeyWords failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["Segment"] = Processor.process_Segment
    self._processMap["MixSegment"] = Processor.process_MixSegment
    self._processMap["MixSegmentParse"] = Processor.process_MixSegmentParse
    self._processMap["DictReload"] = Processor.process_DictReload
    self._processMap["KeyWords"] = Processor.process_KeyWords

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_Segment(self, seqid, iprot, oprot):
    args = Segment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = Segment_result()
    result.success = self._handler.Segment(args.content, args.needPos, args.isPhrase)
    oprot.writeMessageBegin("Segment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MixSegment(self, seqid, iprot, oprot):
    args = MixSegment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MixSegment_result()
    result.success = self._handler.MixSegment(args.content, args.clausePositionGap, args.sentPositionGap, args.needPos, args.isPhrase)
    oprot.writeMessageBegin("MixSegment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_MixSegmentParse(self, seqid, iprot, oprot):
    args = MixSegmentParse_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = MixSegmentParse_result()
    result.success = self._handler.MixSegmentParse(args.content, args.clausePositionGap, args.sentPositionGap, args.needPos, args.isPhrase, args.needParse)
    oprot.writeMessageBegin("MixSegmentParse", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DictReload(self, seqid, iprot, oprot):
    args = DictReload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DictReload_result()
    result.success = self._handler.DictReload()
    oprot.writeMessageBegin("DictReload", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_KeyWords(self, seqid, iprot, oprot):
    args = KeyWords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = KeyWords_result()
    result.success = self._handler.KeyWords(args.content, args.isPhrase)
    oprot.writeMessageBegin("KeyWords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class Segment_args:
  """
  Attributes:
   - content
   - needPos
   - isPhrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.I32, 'needPos', None, None, ), # 2
    (3, TType.I32, 'isPhrase', None, None, ), # 3
  )

  def __init__(self, content=None, needPos=None, isPhrase=None,):
    self.content = content
    self.needPos = needPos
    self.isPhrase = isPhrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.needPos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.isPhrase = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Segment_args')
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.needPos != None:
      oprot.writeFieldBegin('needPos', TType.I32, 2)
      oprot.writeI32(self.needPos)
      oprot.writeFieldEnd()
    if self.isPhrase != None:
      oprot.writeFieldBegin('isPhrase', TType.I32, 3)
      oprot.writeI32(self.isPhrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.needPos is None:
        raise TProtocol.TProtocolException(message='Required field needPos is unset!')
      if self.isPhrase is None:
        raise TProtocol.TProtocolException(message='Required field isPhrase is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Segment_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Segment_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixSegment_args:
  """
  Attributes:
   - content
   - clausePositionGap
   - sentPositionGap
   - needPos
   - isPhrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.I32, 'clausePositionGap', None, None, ), # 2
    (3, TType.I32, 'sentPositionGap', None, None, ), # 3
    (4, TType.I32, 'needPos', None, None, ), # 4
    (5, TType.I32, 'isPhrase', None, None, ), # 5
  )

  def __init__(self, content=None, clausePositionGap=None, sentPositionGap=None, needPos=None, isPhrase=None,):
    self.content = content
    self.clausePositionGap = clausePositionGap
    self.sentPositionGap = sentPositionGap
    self.needPos = needPos
    self.isPhrase = isPhrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.clausePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sentPositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.needPos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.isPhrase = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixSegment_args')
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.clausePositionGap != None:
      oprot.writeFieldBegin('clausePositionGap', TType.I32, 2)
      oprot.writeI32(self.clausePositionGap)
      oprot.writeFieldEnd()
    if self.sentPositionGap != None:
      oprot.writeFieldBegin('sentPositionGap', TType.I32, 3)
      oprot.writeI32(self.sentPositionGap)
      oprot.writeFieldEnd()
    if self.needPos != None:
      oprot.writeFieldBegin('needPos', TType.I32, 4)
      oprot.writeI32(self.needPos)
      oprot.writeFieldEnd()
    if self.isPhrase != None:
      oprot.writeFieldBegin('isPhrase', TType.I32, 5)
      oprot.writeI32(self.isPhrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.clausePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field clausePositionGap is unset!')
      if self.sentPositionGap is None:
        raise TProtocol.TProtocolException(message='Required field sentPositionGap is unset!')
      if self.needPos is None:
        raise TProtocol.TProtocolException(message='Required field needPos is unset!')
      if self.isPhrase is None:
        raise TProtocol.TProtocolException(message='Required field isPhrase is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixSegment_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixSegment_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixSegmentParse_args:
  """
  Attributes:
   - content
   - clausePositionGap
   - sentPositionGap
   - needPos
   - isPhrase
   - needParse
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.I32, 'clausePositionGap', None, None, ), # 2
    (3, TType.I32, 'sentPositionGap', None, None, ), # 3
    (4, TType.I32, 'needPos', None, None, ), # 4
    (5, TType.I32, 'isPhrase', None, None, ), # 5
    (6, TType.I32, 'needParse', None, None, ), # 6
  )

  def __init__(self, content=None, clausePositionGap=None, sentPositionGap=None, needPos=None, isPhrase=None, needParse=None,):
    self.content = content
    self.clausePositionGap = clausePositionGap
    self.sentPositionGap = sentPositionGap
    self.needPos = needPos
    self.isPhrase = isPhrase
    self.needParse = needParse

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.clausePositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sentPositionGap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.needPos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.isPhrase = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.needParse = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixSegmentParse_args')
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.clausePositionGap != None:
      oprot.writeFieldBegin('clausePositionGap', TType.I32, 2)
      oprot.writeI32(self.clausePositionGap)
      oprot.writeFieldEnd()
    if self.sentPositionGap != None:
      oprot.writeFieldBegin('sentPositionGap', TType.I32, 3)
      oprot.writeI32(self.sentPositionGap)
      oprot.writeFieldEnd()
    if self.needPos != None:
      oprot.writeFieldBegin('needPos', TType.I32, 4)
      oprot.writeI32(self.needPos)
      oprot.writeFieldEnd()
    if self.isPhrase != None:
      oprot.writeFieldBegin('isPhrase', TType.I32, 5)
      oprot.writeI32(self.isPhrase)
      oprot.writeFieldEnd()
    if self.needParse != None:
      oprot.writeFieldBegin('needParse', TType.I32, 6)
      oprot.writeI32(self.needParse)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.clausePositionGap is None:
        raise TProtocol.TProtocolException(message='Required field clausePositionGap is unset!')
      if self.sentPositionGap is None:
        raise TProtocol.TProtocolException(message='Required field sentPositionGap is unset!')
      if self.needPos is None:
        raise TProtocol.TProtocolException(message='Required field needPos is unset!')
      if self.isPhrase is None:
        raise TProtocol.TProtocolException(message='Required field isPhrase is unset!')
      if self.needParse is None:
        raise TProtocol.TProtocolException(message='Required field needParse is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MixSegmentParse_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MixSegmentParse_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DictReload_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DictReload_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DictReload_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DictReload_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeyWords_args:
  """
  Attributes:
   - content
   - isPhrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.I32, 'isPhrase', None, None, ), # 2
  )

  def __init__(self, content=None, isPhrase=None,):
    self.content = content
    self.isPhrase = isPhrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.isPhrase = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeyWords_args')
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.isPhrase != None:
      oprot.writeFieldBegin('isPhrase', TType.I32, 2)
      oprot.writeI32(self.isPhrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      if self.content is None:
        raise TProtocol.TProtocolException(message='Required field content is unset!')
      if self.isPhrase is None:
        raise TProtocol.TProtocolException(message='Required field isPhrase is unset!')
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeyWords_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeyWords_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
